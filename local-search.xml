<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2023/01/29/test/"/>
    <url>/2023/01/29/test/</url>
    
    <content type="html"><![CDATA[<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">操作系统Linux命令以及原理Linux shell awd sed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Linux的进程、线程、文件描述符是什么"><a href="#Linux的进程、线程、文件描述符是什么" class="headerlink" title="Linux的进程、线程、文件描述符是什么"></a>Linux的进程、线程、文件描述符是什么</h2><h2 id="Linux目录"><a href="#Linux目录" class="headerlink" title="Linux目录"></a>Linux目录</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">【Linux与Windows默认目录匹对】&#x2F;usr → C:&#x2F;Windows&#x2F; &#x2F;*系统级的目录&#x2F;usr&#x2F;lib → C:&#x2F;Windows&#x2F;System32&#x2F;usr&#x2F;local → C:&#x2F;Progrem Files&#x2F; &#x2F;*用户级的程序目录，用户自己编译的软件默认会安装到这个目录下&#x2F;opt → D:&#x2F;Software &#x2F;*用户级的程序目录, opt有可选的意思，即自定义路径，当你不需要时，直接 rm -rf 掉即可。在硬盘容量不够时，也可将 &#x2F;opt 单独挂载到其他磁盘上使用。【源码存放位置】&#x2F;usr&#x2F;src &#x2F;*系统级的源码目录。&#x2F;usr&#x2F;local&#x2F;src &#x2F;*用户级的源码目录。【目录解释】&#x2F;opt这里主要存放那些可选的程序装到&#x2F;opt目录下，这样，当你尝试完，想删掉软件程序的时候，你就可 以直接删除它，而不影响系统其他任何设置。安装到&#x2F;opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。&#x2F;usr&#x2F;local它和&#x2F;usr目录具有相类似的目录结构。让软件包管理器来管理&#x2F;usr目录，而把自定义的脚本(scripts)放到&#x2F;usr&#x2F;local目录下面。【常用目录及用途】&#x2F;bin 存放二进制可执行文件（ls,cat,mkdir等），常用命令一般都在这里。&#x2F;etc 存放系统管理和配置文件&#x2F;home 存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是&#x2F;home&#x2F;user，可以用~user表示&#x2F;usr 用于存放系统应用程序，比较重要的目录&#x2F;usr&#x2F;local 本地系统管理员软件安装目录（安装系统级的应用）。这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录。&#x2F;usr&#x2F;bin 众多的应用程序&#x2F;usr&#x2F;sbin 超级用户的一些管理程序&#x2F;usr&#x2F;doc linux文档&#x2F;usr&#x2F;include linux下开发和编译应用程序所需要的头文件&#x2F;usr&#x2F;lib 常用的动态链接库和软件包的配置文件&#x2F;usr&#x2F;man 帮助文档&#x2F;usr&#x2F;src 源代码，linux内核的源代码就放在&#x2F;usr&#x2F;src&#x2F;linux里&#x2F;usr&#x2F;local&#x2F;bin 本地增加的命令&#x2F;usr&#x2F;local&#x2F;lib 本地增加的库&#x2F;opt 额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里。&#x2F;proc 虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。&#x2F;root 超级用户（系统管理员）的主目录（特权阶级^o^）&#x2F;sbin 存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等。&#x2F;dev 用于存放设备文件。&#x2F;mnt 系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。&#x2F;boot 存放用于系统引导时使用的各种文件&#x2F;lib 存放跟文件系统中的程序运行所需要的共享库及内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件。&#x2F;tmp 用于存放各种临时文件，是公用的临时文件存储点。&#x2F;var 用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Ubuntu软件源"><a href="#Ubuntu软件源" class="headerlink" title="Ubuntu软件源"></a>Ubuntu软件源</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">修改软件源# 首先备份源列表sudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list_backup编辑&#x2F;etc&#x2F;apt&#x2F;sources.list文件, 在文件最前面添加阿里云镜像源：#  阿里源deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multivesudo apt-get updatesudo apt-get upgradesudo apt-get install build-essential&#x2F;&#x2F;这一步什么意思修改环境变量vim &#x2F;etc&#x2F;profile修改主机名vim &#x2F;etc&#x2F;hostname目录结构<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">find用于查找文件grep用于查找文件中文本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">一个shell必备的内容：sed awd日志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="vim操作"><a href="#vim操作" class="headerlink" title="vim操作"></a>vim操作</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">删除全部内容：ggdG删除到行尾内容：D剪切到行尾内容：dd复制一行：yy粘贴到光标前：P粘贴到光标后：p光标前插入字符：i光标后插入字符：a当前行上插入一空行：O当前行下插入一空行：o撤销：u重做：ctrl+r第一行：gg最后一行：G到第X行：XG到第X行：:X到句首：（到句尾：）到段首：&#123;到段尾：&#125;向上滚屏：ctrl+y向下滚屏：ctrl+e&#x2F;，n向下搜索，N向上搜索（N是反向）？，n向上搜索，N向下搜索（N是反向）直接输入即可，也可输入：在输入&#x2F;或者？可视模式：左下上右：ghjkf保存：w退出：q保存退出：wq&#x2F;ZZ不保存退出：q!&#x2F;ZQ&#x2F;!q是错的另存为：w filename退出编译模式：esc,ctrl c,ctrl [列多选:ctrl+vr替换可以使用G选中到末尾，或者使用hjkl选中多行vim与emacs：需要用到的时候才学习其他vim-plus插件管理d删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="vim使用普通用户，保存root权限文件"><a href="#vim使用普通用户，保存root权限文件" class="headerlink" title="vim使用普通用户，保存root权限文件"></a>vim使用普通用户，保存root权限文件</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">:w !sudo tee %这条命令的含义是把当前编辑的文件的内容当做标准输入输入到命令 sudo tee 文件名 里去vim 命令:w !&#123;cmd&#125;，让vim执行一个外部命令 &#123;cmd&#125;，然后把当前缓冲区的内容从 stdin 传入外部命令&#123;cmd&#125;。外部命令就是一个 Linux 的 shell 命令Linux tee 命令用于读取标准输入的数据，并将其内容 输出成文件 和 标准输出。% 代表当前缓冲区类似一个 Linux 管道 : stdin | tee file1.:w ! ------------------------ 缓冲区 -&gt; stdin2.sudo tee % ------------ stdin -&gt; 当前缓冲区tee 指令会从标准输入 ( stdin 也就是 0 ) 设备读取数据，将其内容输出到标准输出 ( stdout 也就是 1) 设备，同时保存成文件。语法：tee [-ai][--help][--version][文件...]-a 或 --append 　附加到既有文件的后面，而非覆盖它．-i 或 --ignore-interrupts 　忽略中断信号。–help 　在线帮助。–version 　显示版本信息。使用指令 “tee” 将用户输入的数据同时保存到文件 “file1” 和 “file2” 中，输入如下命令：tee file1 file2缓冲区（Buffer）是一块内存区域，用于存储着正在编辑的文件。在保存缓冲区并退出时，内容也随之被写回原始文件。:buffers 或 :ls 或 :files 显示缓冲区列表。第一列：缓冲区编号， 可以在编辑该文件时以此代替文件名。第二列：缓冲区类型标志字符。第三列：文件名，从缓冲区写入到的文件的文件名。内存 &#x3D;&gt; 磁盘。第四列：上次退出或切换缓冲区时光标所在的行号.  % 当前缓冲区    #：上一次的活动缓冲区    l： 被载入并显示在某窗口中的缓冲区    h ：被载入但隐藏的缓冲区.    &#x3D; ：只读的缓冲区    \- ：不可编辑的缓冲区, 其中°modifiable°选项被关闭    \+ ：有改动的缓冲区  缓冲区的操作：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://img-blog.csdnimg.cn/20200517152733260.png#pic_center" alt="缓冲区的操作"></p><h2 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">awk &#39;&#123;print&#125;&#39; test.cppawk &#39;&#123;print $1&#125;&#39; test.cppawk &#39;&#123;print $1&quot;\t&quot;$2&quot;\t&quot;$3&#125;&#39; test.cppawk &#39;&#123;print NR&quot;\t&quot;$1&quot;\t&quot;$2&quot;\t&quot;$3&#125;&#39; test.cpp   (NR&#x3D;number of record)awk认为逗号是系统默认分隔符是空格，直接使用空格把两个连接起来了awk &#39;&#123;print NR&quot;\t&quot;$0&#125;&#39; test.cpp   ($0一整行）awk &#39;&#123;print NF &quot;\t&quot; $0&#125;&#39; test.cpp (NF每一行有多少列 Number of field)awk &#39;$1&#x3D;&#x3D;&quot;gold&quot;&#123;print $0&#125;&#39; test.cppawk &#39;$3&#x3D;1986&#123;print $0&#125;&#39; test.cppawk &#39;NR&#x3D;&#x3D;7&#123;print NR, $0&#125;&#39; test.cppawk &#39;NF&#x3D;&#x3D;7&#123;print $0&#125;&#39; test.cppawk &#39;&#123;print $1 $2&#125;&#39; 从屏幕读取数据awk &#39;BEGIN&#123;FS&#x3D;&quot;,&quot;&#125;&#123;print $1,$2&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="Linux用户"><a href="#Linux用户" class="headerlink" title="Linux用户"></a>Linux用户</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;passwd&#x2F;etc&#x2F;group&#x2F;etc&#x2F;shadow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="一步步来"><a href="#一步步来" class="headerlink" title="一步步来"></a>一步步来</h2><p>比如说学acwing算法中，二分学完，之后都是</p><p>其他案例同理</p><h2 id="使用层面算法原理层面"><a href="#使用层面算法原理层面" class="headerlink" title="使用层面算法原理层面"></a>使用层面算法原理层面</h2><p>比如说shell sed awd，正则表达式</p><p>多用，比如说写个shell脚本一次跑掉，软件源替换等等</p><p>局域网传输这个shell或者挂载到自己网站上下载，一键就可以搭建好自己的环境，curl或者wget</p><p>有些东西你只有一直用才能记得住，比如说shell编写</p><p>不要太高估自己，哪些tutorial就是为了方便易懂，写给你这种人看的</p><p>很多东西定义了一套规则，你需要记忆而已，比如说操作系统，网络编程</p><p>对应的就是计算机基础学科</p><h1 id="查询Linux服务器软硬件信息"><a href="#查询Linux服务器软硬件信息" class="headerlink" title="查询Linux服务器软硬件信息"></a>查询Linux服务器软硬件信息</h1><h2 id="常用信息"><a href="#常用信息" class="headerlink" title="常用信息"></a>常用信息</h2><p>常用的信息有：</p><table><thead><tr><th align="left">项目</th><th align="left">命令</th></tr></thead><tbody><tr><td align="left">cpu</td><td align="left">lscpu</td></tr><tr><td align="left"></td><td align="left">cat &#x2F;proc&#x2F;cpuinfo</td></tr><tr><td align="left">内核版本</td><td align="left">uname -a</td></tr><tr><td align="left">系统版本</td><td align="left">ls &#x2F;etc&#x2F;*release;cat &#x2F;etc&#x2F;*release</td></tr><tr><td align="left">内存大小</td><td align="left">free -h</td></tr><tr><td align="left">编译器版本</td><td align="left">gcc -v</td></tr><tr><td align="left">mpi版本</td><td align="left">mpif90 -v</td></tr><tr><td align="left">NUMA相关信息</td><td align="left">需要额外的hwloc库</td></tr><tr><td align="left">包管理</td><td align="left">apt&#x2F;dpkg是debian系, yum&#x2F;rpm是redhat系, pacman是arch系</td></tr><tr><td align="left">当前shell类型</td><td align="left">echo $0</td></tr><tr><td align="left">硬盘使用信息</td><td align="left">df -h</td></tr><tr><td align="left">PCI设备信息</td><td align="left">lspci -vvv</td></tr><tr><td align="left">查看ip</td><td align="left">ifconfig或ip addr</td></tr><tr><td align="left">查看路由</td><td align="left">route -n或ip route</td></tr><tr><td align="left">查看端口监听</td><td align="left">netstat -lutnp或ss -lutnp</td></tr><tr><td align="left">查看DNS</td><td align="left">cat &#x2F;etc&#x2F;resolv.conf</td></tr></tbody></table><p>在探测环境的过程中的一些技巧</p><table><thead><tr><th align="left">技巧</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">通过Tab键补全</td><td align="left">在探索不熟悉的路径时很有用</td></tr><tr><td align="left">type和which命令</td><td align="left">查看命令的类型和路径</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>拿到一个的账号登录机器后，脑海中对一些系统信息最好有一个第一印象，在后续遇到问题的时候可能会有帮助。比如知道了包管理的方式，在编译报<code>xxx not found</code>错误的时候就可以有针对性的使用<code>dpkg -L</code>或者<code>rpm -qa</code>找包；<code>dpkg -l xxx</code>或者<code>rpm -ql xxx</code>找文件。<code>df -h</code>让我们对剩余磁盘空间有一个估计，避免llvm编译到一半磁盘不够的窘态。网络相关信息能帮助我们解决一些网络故障。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>带着问题学习</p><p>不同Linux发行版版本区别，比如说包管理工具，环境变量目录</p><p>C++什么时候用什么头文件</p><p>1.搞清动态链接，静态链接；</p><p>2.库文件目录</p><p>3.CMAKE</p><ol start="4"><li></li></ol><p>C++中插入汇编代码，asm</p><p>不同语言之间互相调用代码</p><p>编程语言架构研究，比如jvm,.net</p><h2 id="man和info-help"><a href="#man和info-help" class="headerlink" title="man和info,help"></a>man和info,help</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">通过type查看命令是内置还是外部help只能用于内置：help cd外部命令：cmd --helpman没有内建和外部命令的区别info得到的信息比man还要多，来自GNU项目，和man是两个集合，有交集，若 man 页包含的某个工具的概要信息在 info 中也有介绍，那么 man 页中会有“请参考 info 页更详细内容”的字样。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux  mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/29/hello-world/"/>
    <url>/2023/01/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
